{"version":3,"sources":["fetchData.ts","aggregateByDate.ts","aggregateByLocation.ts","isMobile.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchData","a","fetch","response","json","data","aggregateByDate","reduce","agg","current","date","Date","existing","find","point","x","getTime","y","push","map","setHours","sort","point1","point2","aggregateByLocation","transformedData","fullLocation","city","state","transformedEntries","Object","entries","e1","e2","locations","e","values","isMobile","test","navigator","userAgent","App","useState","tab","setTab","dateData","setDateData","locationData","setLocationData","useEffect","jsonData","className","AppBar","color","position","Tabs","value","onChange","newValue","Tab","label","length","datasets","backgroundColor","randomColor","hue","options","scales","xAxes","type","time","unit","count","alpha","labels","cutoutPercentage","legend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oVAQeA,EANA,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,2FADb,cACVC,EADU,gBAEyBA,EAASC,OAFlC,cAEVA,EAFU,yBAGTA,EAAKC,MAHI,2CAAH,qDCuBAC,EAvBS,SAACD,GAevB,OAdwBA,EAAKE,QAAO,SAACC,EAAKC,GACxC,IAAKA,EAAQC,KACX,OAAOF,EAET,IAAME,EAAO,IAAIC,KAAKF,EAAQC,MACxBE,EAAWJ,EAAIK,MAAK,SAACC,GAAD,OAAWA,EAAMC,EAAEC,YAAcN,EAAKM,aAMhE,OALIJ,EACFA,EAASK,GAAK,EAEdT,EAAIU,KAAK,CAAEH,EAAGL,EAAMO,EAAG,IAElBT,IACN,IAGAW,KAAI,SAACL,GAEJ,OADAA,EAAMC,EAAEK,SAAS,EAAG,EAAG,GAChBN,KAERO,MAAK,SAACC,EAAQC,GAAT,OAAoBA,EAAOR,EAAEC,UAAYM,EAAOP,EAAEC,cCJ7CQ,EAhBa,SAACnB,GAC3B,IAAMoB,EAAkBpB,EAAKE,QAAO,SAACC,EAAKC,GACxC,IAAMiB,EAAY,UAAMjB,EAAQkB,KAAd,aAAuBlB,EAAQmB,OAGjD,OAFApB,EAAIkB,GAAgBlB,EAAIkB,IAAiB,EACzClB,EAAIkB,IAAiB,EACdlB,IACN,IAEGqB,EAAqBC,OAAOC,QAAQN,GAAiBJ,MAAK,SAACW,EAAIC,GAAL,OAAYA,EAAG,GAAKD,EAAG,MAEvF,MAAO,CACLE,UAAWL,EAAmBV,KAAI,SAACgB,GAAD,OAAOA,EAAE,MAC3CC,OAAQP,EAAmBV,KAAI,SAACgB,GAAD,OAAOA,EAAE,QCZ7BE,EAFE,iBAAe,4BAA4BC,KAAKC,UAAUC,YCgF5DC,EAnEO,WAAO,IAAD,EACJC,mBAAS,QADL,mBACnBC,EADmB,KACdC,EADc,OAEMF,mBAAkB,IAFxB,mBAEnBG,EAFmB,KAETC,EAFS,OAGcJ,mBAAuB,IAHrC,mBAGnBK,EAHmB,KAGLC,EAHK,KAc1B,OATAC,qBAAU,WACR,sBAAC,4BAAAhD,EAAA,sEACwBD,IADxB,OACOkD,EADP,OAGCJ,EAAYxC,EAAgB4C,IAC5BF,EAAgBxB,EAAoB0B,IAJrC,0CAAD,KAMC,IAGD,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,UAC/B,kBAACC,EAAA,EAAD,CAAMC,MAAOb,EAAKc,SAAU,SAACtB,EAAGuB,GAAJ,OAAiBd,EAAOc,KAClD,kBAACC,EAAA,EAAD,CAAKH,MAAM,OAAOI,MAAM,YACxB,kBAACD,EAAA,EAAD,CAAKH,MAAM,WAAWI,MAAM,kBAGvB,SAARjB,GAAkBE,EAASgB,OAAS,GACnC,kBAAC,IAAD,CACExD,KAAM,CACJyD,SAAU,CAAC,CACTF,MAAO,YACPvD,KAAMwC,EACNkB,gBAAiBC,IAAY,CAAEC,IAAK,WAGxCC,QAAS,CACPC,OAAQ,CACNC,MAAO,CAAC,CACNC,KAAM,OACNC,KAAM,CACJC,KAAM,aAOT,aAAR5B,GAAsBI,EAAaX,QAClC,kBAAC,IAAD,CACE/B,KAAM,CACJyD,SAAU,CAAC,CACTzD,KAAM0C,EAAaX,OACnB2B,gBAAiBC,IAAY,CAC3BQ,MAAOzB,EAAab,UAAU2B,OAC9BI,IAAK,MACLQ,MAAO,OAGXC,OAAQ3B,EAAab,WAEvBgC,QAAO,aACLG,KAAM,WACNM,iBAAkB,IACdtC,KAAc,CAAEuC,QAAQ,QC5DpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmB/C,WACrBA,UAAUgD,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e889dcc3.chunk.js","sourcesContent":["import { DataType } from './types';\n\nconst fetchData = async (): Promise<DataType[]> => {\n  const response = await fetch('https://raw.githubusercontent.com/2020PB/police-brutality/data_build/all-locations.json');\n  const json: { data: DataType[] } = await response.json();\n  return json.data;\n};\n\nexport default fetchData;\n","import { DataType, Point } from './types';\n\nconst aggregateByDate = (data: DataType[]): Point[] => {\n  const transformedData = data.reduce((agg, current) => {\n    if (!current.date) {\n      return agg;\n    }\n    const date = new Date(current.date);\n    const existing = agg.find((point) => point.x.getTime() === date.getTime());\n    if (existing) {\n      existing.y += 1;\n    } else {\n      agg.push({ x: date, y: 1 });\n    }\n    return agg;\n  }, [] as Point[]);\n\n  return transformedData\n    .map((point) => {\n      point.x.setHours(0, 0, 0);\n      return point;\n    })\n    .sort((point1, point2) => point2.x.getTime() - point1.x.getTime());\n};\n\nexport default aggregateByDate;\n","import { DataType, LocationData } from './types';\n\nconst aggregateByLocation = (data: DataType[]): LocationData => {\n  const transformedData = data.reduce((agg, current) => {\n    const fullLocation = `${current.city}, ${current.state}`;\n    agg[fullLocation] = agg[fullLocation] || 0;\n    agg[fullLocation] += 1;\n    return agg;\n  }, {} as { [key: string]: number });\n\n  const transformedEntries = Object.entries(transformedData).sort((e1, e2) => e2[1] - e1[1]);\n\n  return {\n    locations: transformedEntries.map((e) => e[0]),\n    values: transformedEntries.map((e) => e[1]),\n  };\n};\n\nexport default aggregateByLocation;\n","const isMobile = (): boolean => /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n\nexport default isMobile;\n","import AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport React, { useEffect, useState } from 'react';\nimport { Line, Pie } from 'react-chartjs-2';\nimport './App.css';\nimport randomColor from 'randomcolor';\nimport fetchData from './fetchData';\nimport aggregateByDate from './aggregateByDate';\nimport { Point, LocationData } from './types';\nimport aggregateByLocation from './aggregateByLocation';\nimport isMobile from './isMobile';\n\nconst App: React.FC = () => {\n  const [tab, setTab] = useState('date');\n  const [dateData, setDateData] = useState<Point[]>([]);\n  const [locationData, setLocationData] = useState<LocationData>({} as LocationData);\n\n  useEffect(() => {\n    (async () => {\n      const jsonData = await fetchData();\n\n      setDateData(aggregateByDate(jsonData));\n      setLocationData(aggregateByLocation(jsonData));\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <AppBar color=\"default\" position=\"static\">\n        <Tabs value={tab} onChange={(e, newValue) => setTab(newValue)}>\n          <Tab value=\"date\" label=\"By Date\" />\n          <Tab value=\"location\" label=\"By Location\" />\n        </Tabs>\n      </AppBar>\n      {tab === 'date' && dateData.length > 0 && (\n        <Line\n          data={{\n            datasets: [{\n              label: 'Incidents',\n              data: dateData,\n              backgroundColor: randomColor({ hue: 'red' }),\n            }],\n          }}\n          options={{\n            scales: {\n              xAxes: [{\n                type: 'time',\n                time: {\n                  unit: 'day',\n                },\n              }],\n            },\n          }}\n        />\n      )}\n      {tab === 'location' && locationData.values && (\n        <Pie\n          data={{\n            datasets: [{\n              data: locationData.values,\n              backgroundColor: randomColor({\n                count: locationData.locations.length,\n                hue: 'red',\n                alpha: 0.5,\n              }),\n            }],\n            labels: locationData.locations,\n          }}\n          options={{\n            type: 'doughnut',\n            cutoutPercentage: 25,\n            ...(isMobile() && { legend: false }),\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}